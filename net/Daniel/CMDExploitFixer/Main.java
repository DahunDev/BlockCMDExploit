package net.Daniel.CMDExploitFixer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.regex.Matcher;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

public class Main extends JavaPlugin implements Listener {

	Main plugin;
	protected HashSet<String> exploitList = new HashSet<String>();

	protected boolean sendDeny_msg = true;

	protected boolean StackTraceOnFileEx = false;
	
	protected String denyMSG = "§b§l[ §f§lServer §b§l] §c명령어 %cmd%(은)는 서버 보안상 사용이 금지 되어있습니다.";
	protected String reloaded = "§b§l[ §f§lServer §b§l] §a성공적으로 설정을 재로드 하였습니다.";
	
	

	File cmdLog;

	@Override
	public void onDisable() {
		PluginDescriptionFile pdFile = this.getDescription();

		System.out.println(
				String.valueOf(String.valueOf(pdFile.getName())) + " " + pdFile.getVersion() + " 이(가) 비활성화 되었습니다.");
	}

	@Override
	public void onEnable() {

		PluginDescriptionFile pdFile = this.getDescription();
		Bukkit.getPluginManager().registerEvents((Listener) this, (Plugin) this);

		this.reloadConfiguration();
		plugin = this;

		System.out.println(
				String.valueOf(String.valueOf(pdFile.getName())) + " " + pdFile.getVersion() + " 이(가) 활성화 되었습니다.");

	}

	@Override
	public boolean onCommand(final CommandSender sender, final Command command, final String commandLabel,
			final String[] args) {
		if (commandLabel.equalsIgnoreCase("exploitcmds") || commandLabel.equalsIgnoreCase("명령어취약점리로드")) {
			if (sender.hasPermission("CMDExploitFixer.reload") || sender.isOp()) {
				this.reloadConfiguration();
				sender.sendMessage(reloaded);
			}

			return false;
		}
		return false;
	}

	public void reloadConfiguration() {

		PluginDescriptionFile pdFile = this.getDescription();
		File config = new File("plugins/" + pdFile.getName() + "/config.yml");
		if (config.exists()) {
			YamlConfiguration cfg = YamlConfiguration.loadConfiguration(config);
			this.saveDefaultConfig();
			for (String key : cfg.getConfigurationSection("").getKeys(true)) {
				if (!this.getConfig().contains(key)) {
					this.getConfig().set(key, cfg.get(key));
				}
			}
		} else {
			this.saveDefaultConfig();
		}
		this.reloadConfig();

		this.sendDeny_msg = this.getConfig().getBoolean("send_deny_msg");

		if (!getConfig().getString("Deny_message").isEmpty()) {
			this.denyMSG = ChatColor.translateAlternateColorCodes('&', this.getConfig().getString("Deny_message"));

		}
		if (!getConfig().getString("reloaded").isEmpty()) {
			this.reloaded = ChatColor.translateAlternateColorCodes('&', this.getConfig().getString("reloaded"));

		}
		exploitList.removeAll(exploitList);

		List<String> temp = getConfig().getStringList("Exploit-CMDs");

		for (String cmd : temp) {
			exploitList.add(cmd.toLowerCase());

		}

		
		String pluginFolder = getDataFolder().getAbsolutePath();
		new File(pluginFolder).mkdirs();
		cmdLog = new File(pluginFolder + File.separator + "OffenseLog.log");

		try {

			if (!cmdLog.exists()) {
				cmdLog.createNewFile();
			}

		} catch (Exception e) {
			// TODO: handle exception

		}

	}

	@EventHandler(priority = EventPriority.HIGHEST)
	public void PreCommoand(PlayerCommandPreprocessEvent e) {

		final String message = e.getMessage().replaceAll("^/([^ :]*:)?", "/").toLowerCase();
		
		for (String exploit : exploitList) {

			if (message.startsWith(exploit + " ") || message.endsWith(exploit)) {

				e.setCancelled(true);

				if (sendDeny_msg) {
					e.getPlayer().sendMessage(denyMSG.replaceAll("%cmd%", Matcher.quoteReplacement(message)));

					new BukkitRunnable() {
						public void run() {
							String cmd = e.getMessage();
						 String playername = e.getPlayer().getName();
							long longtime = System.currentTimeMillis();

							SimpleDateFormat timeformat = new SimpleDateFormat("yyyy-MM-dd a hh:mm:ss");
							String time = timeformat.format(new Date(longtime));
							
							try {
								FileWriter fw = new FileWriter(plugin.cmdLog, true);
								BufferedWriter bw = new BufferedWriter(fw);
								bw.write("날짜 및 시각: " + time + " 닉네임: " + playername + " 사용된 명령어: " + Matcher.quoteReplacement(cmd));
								bw.newLine();
								fw.flush();
								bw.close();
								
								
								
								
								
							} catch (Exception e) {
								if(getConfig().getBoolean("Stacktrace_On_File_Exception", false) ) {
									e.printStackTrace();
									
								}
								
								
							}
							
							
							

						}
					}

				.runTaskAsynchronously(this);

				}

				break;

			}

		}

	}

	public void logToFile(String message) {
		(new BukkitRunnable() {
			public void run() {

				{

					try {
						File dataFolder = getDataFolder();
						if (!dataFolder.exists()) {
							dataFolder.mkdir();
						}

						File saveTo = new File(getDataFolder(), "Offense.log");
						if (!saveTo.exists()) {
							saveTo.createNewFile();
						}

						FileWriter fw = new FileWriter(saveTo, true);

						PrintWriter pw = new PrintWriter(fw);

						pw.println(message);

						pw.flush();

						pw.close();

					} catch (IOException e) {

						e.printStackTrace();

					}

				}

			}
		}).runTaskAsynchronously(this);
	}

}
